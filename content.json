[{"title":"JSP学习笔记","date":"2017-12-18T06:36:52.000Z","path":"2017/12/18/JSP学习笔记/","text":"JSP学习笔记JSP简介JSP全名为Java Server Pages，其根本是一个简化的Servlet设计，实现了在Java当中使用HTML标签。是一种动态网页技术标准，与Servlet一样，在服务器端执行。拥有Java平台，安全性高，适合开发大型的，企业级的Web应用程序。 Web项目结构 JSP页面元素 JSP指令page：通常位于jsp页面的顶端，同一个页面可以有多个page指令。 &lt;%@page 属性1=“属性值” 属性2=“属性值“ …属性n=”属性值n”%&gt; 属性 描述 默认值 language 指定JSP页面使用的脚本语言 java import 通过该属性来引用脚本语言中使用到的类文件 无 contentType 用来制定JSP页面所采用的编码方式 text/html,ISO-8859-1 include：将一个外部文件嵌入到当前JSP文件中，同时解析这个页面中的JSP语句。 taglib：使用标签库定义新的自定义标签，在JSP页面中启动定制行为。 JSP注释HTML的注释：： 1&lt;!-- html注释 --&gt; //客户端可见 JSP的注释： 1&lt;%-- JSP注释 --%&gt; //客户端不可见 JSP脚本注释： 1234//单行注释/***多行注释*/ JSP脚本在JSP页面中通过&lt;% %&gt;标签执行的java代码。 1&lt;% out.println(\"Hello world!\") %&gt; JSP声明在JSP页面中定义变量或者方法。 1234567&lt;%! String name = \"张三\"; // 声明了一个字符串变量 int add(int x, int y) //声明了一个返回整形的方法，实现两个整数的求和 &#123; return x + y; &#125;%&gt; JSP表达式在JSP页面中执行的表达式 12345678910&lt;%! String name = \"张三\"; // 声明了一个字符串变量 int add(int x, int y) //声明了一个返回整形的方法，实现两个整数的求和 &#123; return x + y; &#125;%&gt;&lt;!-- 表达式不以；结尾 --&gt;你好，&lt;%=name %&gt;。&lt;br&gt;x + y = &lt;%=add(10,15) %&gt;&lt;br&gt; JSP页面生命周期 jspService()：方法被调用来处理客户端的请求。对每一个 请求，JSP引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求该JSP文件，则JSP引擎会创建多个线程。以多线程的方式执行可以大大降低对系统的资源需求，提高系统的并发量及响应时间。 JSP内置对象JSP内置对象是Web容器创建的一组对象，不使用new关键字就可以使用的内置对象。 out对象JspWriter类的实例，向客户端输出内容的常用对象。 常用方法： 12345678void println() //向客户端打印字符串void clear() //清除缓冲区的内容，如果在flush之后调用会抛出异常void clearBuffer() //清楚缓冲区的内容，在flush之后调用不会抛出异常void flush() //将缓冲区内容输出到客户端int getBufferSize() //返回缓冲区的字节数的大小，如果不设缓冲区则为0int getRemaining() //返回缓冲区剩余大小boolean isAutoFlush() //返回缓冲区满时，是否自动清空还是抛出异常void close() //关闭输出流 request对象客户端的请求信息被封装在reqeust对象中，通过它才能了解到客户的需求，然后做出响应。HttpServletRequest类的实例。request对象具有请求域，即完成客户端的请求之前，该对象一直有效。 常用方法： 12345678String getParameter(String name) //返回name指定参数的参数值String[] getParameterValues(String name) //返回包含参数name的所有值的数组void setAttribute(String, Object) //存储此请求中的属性。object getAttribute(String name) //返回指定属性的属性值String getContentType() //得到请求体的MIME类型String getProtocol() //返回请求用的协议类型及版本号String getServerName() //返回接受请求的服务器主机名void setCharacterEncoding(String charEncoding) //设置字符编码 response对象包含了响应客户请求的有关信息。HttpServletResponse类的实例。response对象具有页面作用域，即访问一个页面时，该页面的response对象只能对这次访问有效，其他页面的response对象对当前页面无效。 常用方法： 1234String getCharacterEncoding() //返回响应用的是哪种字符编码void setContentType(String type) //设置响应的MIME类型PrintWriter getWriter() //返回可以向客户端输出字符的一个对象sendRedirect(String location) //重新定向客户端的请求 请求转发与请求重定向的区别 -请求转发：服务器行为，request.getRequestDispatcher().forward(request, response)是一次请求，转发后请求对象会保存,地址栏的URL地址不会改变。 -请求重定向：客户端行为，response.sendRedirect()，从本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的URL地址会改变。 session对象Web中的session指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间。在服务器的内存中保存着不同用户的session。 session对象是JSP内置对象，HttpSession类的实例。 常用方法： 123456long getCreationTime() //返回session创建时间public String getId() //返回session创建时JSP引擎为他设的唯一ID值public Object setAttribute(String name, Object value) //使用指定名称将对象绑定到次会话public Object getAttribute(String name) //返回与此会话中的指定名称绑定在一起的对象，如果没有对象绑定在该名称下，则返回nullString[] getValueNames() //返回一个包含此session种所有可用属性的数组int getMaxInactiveInterval() //返回两次请求间隔多长时间此session被取消（单位秒） Session的生命周期 创建：当客户第一次访问某个jsp或者Servlet的时候，服务器会为当前会话创建一个SessionId，每次客户端向服务器端发送请求时，都会将此SessionId携带过去，服务器端会对此SessionId进行校验。 活动： 某次会话当中通过超链接打开的新页面会属于同一次会话。 只要当前会话页面没有全部关闭，重新打开新的浏览器窗口访问同一项目资源时属于同一次会话。 除非本次会话的所有页面都关闭后在重新访问某个jsp或者Servlet将会创建新的会话。 销毁： 调用了session.invalidate()方法。 Session过期（超时）。两种设置方式： 1session.setMaxInactiveInterval(时间) //单位是秒 在web.xml配置 123456&lt;!-- 设置会话10分钟后过期 --&gt;&lt;session-config&gt; &lt;session-timeout&gt; 10 &lt;/session-timeout&gt;&lt;/session-config&gt; 服务器重新启动。 ​ application对象 application对象实现了用户间数据的共享，可存放全局变量。 application开始于服务器的启动，终止于服务器的关闭。 在用户的前后连接或不同用户之间的连接中，可以对application对象的同一属性进行操作。 在任何地方对application对象属性的操作，都将影响到其他用户对此的访问。 application对象是ServletContext类的实例。 常用方法： 1234public void setAttribute(String name, Object value) //使用指定名称将对象绑定到此会话public Object getAttribute(String name) //返回此会话中的指定名称绑定在一起的对象，如果没有对象绑定在该名称下，则返回null。Enumeration getAttributeNames() //返回所有可用属性的枚举String getServerInfo() //返回JSP（Servlet）引擎名及版本号 page对象page对象就是指向当前JSP页面本身，java.lang.Object类的实例。 常用方法： 12345678910class getClass() //返回此Object的类int hashCode() //返回此Object的hash码boolean equals(Object obj) //判断此Object是否与指定的Object对象相等void copy(Object obj) //把此Object对象拷贝到指定的Object对象中Object clone() //克隆此Object对象String toString() //把此Object对象转换成String类的对象void notify() //唤醒一个等待的线程void notifyAll() //唤醒所有等待的线程void wait(int timeout) //使一个线程处于等待直到timeout结束或被唤醒void wait() //使一个线程处于等待直到被唤醒 pageContext对象 提供了对JSP页面内所有的对象及名字空间的访问 可以访问到本页所在的session，也可以获取本页面所在的application的某一属性值 相当于页面中所有功能的集合 常用方法： 12345678910JspWriter getOut() //返回当前客户端响应被使用的JspWriter流(out)HttpSession getSession() //返回当前页中的HttpSession对象(session)Object getPage() //返回当前页的Object对象(page)ServletRequest getRequest() //返回当前页的ServletRequest对象(request)ServletRequest getResponse() //返回当前页的ServletResponse对象(response)void setAttribute(String name, Object attribute) //设置属性及属性值Object getAttribute(String name, int scope) //在指定范围内取属性的值int getAttributeScope(String name) //返回某属性的作用范围void forward(String relativeUrlPath) //使当前页面重导到另一页面void include(String relativeUrlPath) //在当前位置包含另一文件 config对象config对象是在一个servlet初始化时，JSP引擎向它传递信息用的，此信息包括Servlet初始化时所要用到的参数（通过属性名和属性值构成）以及服务器的有关信息（通过传递一个ServletContext对象） 常用方法： 123ServletContext getServletContext() //返回含有服务器相关信息的ServletContext对象String getInitParameter(String name) //返回初始化参数的值Enumeratino getInitParameterNames() //返回Servlet初始化所需所有参数的枚举 exception对象exception对象是一个异常对象，当一个页面在运行过程中发生了异常，就产生这个对象。如果一个JSP页面要应用此对象，就必须把isErrorPage设为true，否则无法编译。它实际上是java.lang.Throwable的对象。 常用方法： 1234String getMessage() //返回描述异常的消息String toString() //返回关于异常的简短描述消息void printStackTrace() //显示异常及其栈轨迹Throwable FillInStackTrace() //重写异常的执行栈轨迹 JavabeanJavabean简介Javabeans就是符合某种特定规范的Java类。使用Javabeans的好处是解决代码重复编写，减少代码冗余，功能区分明确，提高代码的维护性。 Javabean设计原则 12345678910111213141516171819202122232425262728293031//公有学生类public class Students&#123; //私有属性 private String name; private int age; //无参的共有构造方法 public Students() &#123;&#125; //getter和setter方法 public void setName(String name) &#123; this.name = name; &#125; public String getName() &#123; return this.name; &#125; public void setAge(int age) &#123; this.age = age; &#125; public int getAge() &#123; return this.age; &#125;&#125; Jsp动作元素JSP动作元素（action elements），动作元素为请求处理阶段提供信息。动作元素遵循XML元素的语法，有一个包含元素名的开始标签，可以有属性、可选的内容、与开始标签匹配的结束标签。 在项目的src文件夹中创建com.po包和Users.java类： 12345678910111213141516171819202122232425262728package com.po;/*** 用户类**/public class Users &#123; private String username; //用户名 private String password; //密码 //保留此默认的构造方法 public Users() &#123;&#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125;&#125; 用普通方法创建JavaBean：在index.jsp加入代码 12345678910111213......&lt;%@ page import=\"com.po.Users\" %&gt;......&lt;body&gt; &lt;% User user = new Users(); user.setUsername(\"admin\"); //设置用户名 user.setPassword(\"123456\"); //设置密码 %&gt; &lt;!-- 使用普通方法创建javabean的实例--&gt; 用户名：&lt;%=user.getUsername() %&gt;&lt;br&gt; 密码：&lt;%=user.getPassword() %&gt;&lt;br&gt;&lt;/body&gt; 使用JSP动作标签使用javabean： useBean：在jsp页面中实例化或者在指定范围内使用javabean。 1&lt;jsp:useBean id=\"标识符\" class=\"java类名\" scope=\"作用范围\" /&gt; 此方法不用加入&lt;%@ page import=”com.po.Users” %&gt;代码。 12345......&lt;!-- 使用useBean动作创建javabean的实例 --&gt;&lt;jsp:useBean id=\"myUsers\" class=\"com.po.Users\" scope=\"page\" /&gt;用户名：&lt;%=myUsers.getUsername() %&gt;密码：&lt;%=myUsers.getPassword() %&gt; setProperty：给已经实例化的JavaBean对象的属性赋值，一共有四种形式。 12345678&lt;!-- 跟表单关联 --&gt;&lt;jsp:setProperty name = \"JavaBean实例名\" property = \"*\" /&gt;&lt;!-- 跟表单关联,单个属性 --&gt;&lt;jsp:setProperty name = \"JavaBean实例名\" property = \"JavaBean属性名\" /&gt;&lt;!-- 手动设置数值 --&gt;&lt;jsp:setProperty name = \"JavaBean实例名\" property = \"JavaBean属性名\" value = \"BeanValue\"/&gt;&lt;!-- 跟request参数关联 --&gt;&lt;jsp:setProperty name = \"JavaBean实例名\" property = \"propertyName\" param = \"request对象中的参数名\" /&gt; login.jsp页面的表单： 12345678910...&lt;body&gt; &lt;form name=\"loginForm\" action=\"dologin.jsp\" method=\"post\"&gt; &lt;table&gt; &lt;tr&gt;&lt;td&gt;用户名：&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"username\" value=\"\" /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;密码：&lt;/td&gt;&lt;td&gt;&lt;input type=\"password\" name=\"password\" value=\"\" /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td colspan=\"2\" align=\"center\"&gt;&lt;input type=\"submit\" value=\"登陆\" /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;&lt;/body&gt; ​ dologin.jsp页面：如果在jsp:useBean标签class属性中的com.po.Users类有和表单对应的属性时，在jsp:setProperty标签中的property属性设置*，表示自动匹配。 1234567891011&lt;body&gt; &lt;jsp:useBean id=\"myUsers\" class=\"com.po.Users\" scope\"page\"/&gt; &lt;h1&gt; setProperty动作元素 &lt;/h1&gt; &lt;hr&gt; &lt;!-- 根据表单自动匹配所有属性 --&gt; &lt;jsp:setProperty name=\"myUsers\" property=\"*\" /&gt; 用户名：&lt;%=myUsers.getUsername() %&gt;&lt;br&gt; 密码：&lt;%=myUsers.getPassword() %&gt;&lt;br&gt;&lt;/body&gt; ​ getProperty：获取指定Javabean对象的属性值。 1&lt;jsp:getProperty name=\"JavaBean实例名\" property=\"属性名\" /&gt; 1234...用户名：&lt;jsp:getProperty name=\"myUsers\" property=\"username\" /&gt;密码：&lt;jsp:getProperty name=\"myUsers\" property=\"password\" /&gt;... ​ Javabean的四个作用域范围使用useBeans的Scope属性可以用来指定javabean的作用域范围 page：仅在当前页面有效。 request：可以通过HttpRequest.getAttribute()方式取得JavaBean对象。 session：可以通过HttpSession.getAttribute()方式取得JavaBean对象。 application：可以通过application.getAttribute()方法取得JavaBean对象。 1&lt;jsp:useBeans id=\"myUsers\" class=\"com.po.Users\" scope=\"page\" /&gt; ​ Model1在Model1模型之前，整个Web应用的情况几乎全部由JSP页面组成，JSP页面接收处理客户端的请求，对请求处理后直接做出响应，但是作用做回出现在界面层充斥着大量的业务逻辑和代码以及数据访问层的代码，Web程序的可扩展性和可维护性非常差。 JavaBean的出现可以使jsp页面中使用JavaBean封装的数据或者调用JavaBean的业务逻辑代码，作用大大提升了程序的可维护性。 分装DAO的java类： 123456789101112131415161718package com.dao;import com.po.Users;//用户的业务逻辑类public class UserDAO &#123; //用户的登陆方法 public boolean userLogin(Users u) &#123; //只允许用admin同时作为用户名和密码登陆 if(\"admin\".equals(u.getUsername()) &amp;&amp; \"admin\".equals(u.getPassword())) &#123; return true; &#125; else &#123; return false; &#125; &#125;&#125; Jsp状态管理http协议无状态性无状态是指当浏览器发送请求给服务器的时候，服务器响应客户端的请求，但是当同一个浏览器再次发送请求给服务器的时候，服务器无法分辨它是否刚才那个浏览器，所以有了保存用户状态的两大机制： Cookie Session Cookie简介中文名称为“小甜饼”，是Web服务器保存在客户端的一系列文本信息。 对特定用户的追踪 保存用户网页浏览的记录 简化登陆 安全风险：容易泄露用户信息 Cookie的创建与使用123456&lt;!-- 创建Cookie对象 --&gt;Cookie newCookie = Cookie(String key, Object value);&lt;!-- 写入Cookie对象 --&gt;response.addCookie(newCookie);&lt;!-- 读取Cookie对象 --&gt;Cookie[] cookies = request.getCookies(); 常用方法： 12345void setMaxAge(int expiry) //设置cookie的有效期，单位为秒void setValue(String value) //在创建cookie后，对cookie赋值String getName() //获取cookie的名称String getValue() //获取cookie的值int getMaxAge() //获取cookie的有效时间，单位为秒 login.jsp：多了一项cookie的选项。 1234567891011121314151617181920212223242526272829303132333435... &lt;% String username = \"\"; String password = \"\"; Cookie[] cookies = request.getCookies(); if(cookies != null &amp;&amp; cookies.length &gt; 0) &#123; for(Cookie c : cookies) &#123; if(c.getName().equals(\"username\")) &#123; username = c.getValue(); &#125; if(c.getName().equals(\"password\")) &#123; password = c.getValue(); &#125; &#125; &#125; &#125; %&gt;&lt;body&gt; &lt;h1&gt; 用户登录 &lt;/h1&gt; &lt;hr&gt; &lt;form name=\"loginForm\" action=\"dologin.jsp\" method=\"post\"&gt; &lt;table&gt; &lt;tr&gt;&lt;td&gt;用户名：&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"username\" value=\"&lt;%=username %&gt;\" /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;密码：&lt;/td&gt;&lt;td&gt;&lt;input type=\"password\" name=\"password\" value=\"&lt;%=password %&gt;\" /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td colspan=\"2\"&gt;&lt;input type=\"checkbox\" name=\"isUseCookie\" checked=\"checked\" value=\"十天内记住我的登录状态\" /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td colspan=\"2\" align=\"center\"&gt;&lt;input type=\"submit\" value=\"登陆\" /&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;&lt;/body&gt; dologin.jsp： 1234567891011121314151617181920212223242526272829303132&lt;% //首先判断用户是否选择了记住登录状态 String[] isUseCookies = request.getParameterValues(\"isUseCookie\"); if(isUseCookies != null &amp; isUseCookies.length &gt; 0) &#123; //不出现中文乱码 request.setCharacterEncoding(\"utf-8\"); //把用户名和密码保存在Cookie对象里 String username = request.getParameter(\"username\"); String password = request.getParameter(\"password\"); Cookie usernameCookie = new Cookie(\"username\", username); Cookie passwordCookie = new Cookie(\"password\", password); usernamCokie.setMaxAge(864000); //设置最大生命存期为10天 passwordCokie.setMaxAge(864000); response.addCookie(usernameCookie); response.addCookie(passwordCookie); &#125; else &#123; //如果用户没有勾选记住登录状态 Cookie[] cookies = request.getCookies(); if(cookies != null &amp;&amp; cookies.length &gt; 0) &#123; for(Cookie c : cookies) &#123; if(c.getName().equals(\"username\") || c.getName.equals(\"password\")) &#123; c.setMaxAge(0); //设置cookie失效 response.addCookie(c); //重新保存 &#125; &#125; &#125; &#125;%&gt;&lt;a href=\"users.jsp\" target=\"_blank\"&gt;查看用户信息&lt;/a&gt; users.jp: 1234567891011121314151617181920212223242526272829...&lt;body&gt; &lt;h1&gt; 用户信息 &lt;/h1&gt; &lt;hr&gt; &lt;% String username = \"\"; String password = \"\"; Cookie[] cookies = request.getCookies(); if(cookies != null &amp;&amp; cookies.length &gt; 0) &#123; for(Cookie c : cookies) &#123; if(c.getName().equals(\"username\")) &#123; username = c.getValue(); &#125; if(c.getName().equals(\"password\")) &#123; password = c.getValue(); &#125; &#125; &#125; &#125; %&gt; 用户名：&lt;%=username %&gt;&lt;br&gt; 密码：&lt;%=password %&gt;&lt;br&gt;&lt;/body&gt; Session与Cookie的对比 session cookie 在服务器端保存用户信息 在客户端保存用户信息 session中保存的是Object类型 cookie保存的是String类型 随会话的结束而将其存储的数据销毁 cookie可以长期保存在客户端 保存重要的信息 保存不重要的用户信息 Jsp指令与动作元素include指令1&lt;%@ include file=\"URL\" %&gt; include动作 page：要包含的页面。 flush：被包含的页面是否从缓冲区读取。 1&lt;jsp:include page=\"URL\" flush=\"true|false\" /&gt; include指令与include动作比较 include指令 jsp:include动作 语法格式 &lt;%@ include file=”..” %&gt; \\ 发生作用的时间 页面转换期间 请求期间 包含的内容 文件的实际内容 页面的输出 转换成的Servlet 主页面和被包含页面转换为一个Servlet 主页面和被包含页面转换为独立的Servlet 编译时间 较慢，资源必须被解析 较快 执行时间 较慢 较慢，每次资源必须被解析 forward动作123&lt;jsp:forward page=\"URL\" /&gt;&lt;!-- 等同于 --&gt;request.getRequestDispatcher(\"/url\").forward(request, response); param动作1&lt;jsp:param name=\"参数名\" value=\"参数值\" /&gt; 常常与\\ 一起使用，作为其子标签： 123456&lt;body&gt; &lt;jsp:forward page=\"user.jsp\"&gt; &lt;!-- 在接收从user.jsp从传递来的参数外还可以自己通过param标签添加额外的参数 --&gt; &lt;jsp:param value=\"admin@123.net\" name=\"email\" /&gt; &lt;/jsp:forward&gt;&lt;/body&gt;","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]}]